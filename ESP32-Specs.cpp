// ESP32-C3 MINI - EXPLORADOR TOTAL v6.0
// Versi√≥n robusta sin conflictos de watchdog
#include <WiFi.h>
#include <esp_system.h>
#include <esp_sleep.h>
#include <esp_chip_info.h>
#include <soc/rtc.h>

// Estado del diagn√≥stico
bool diagnosticoCompleto = false;

void setup() {
  // Inicializaci√≥n serial robusta
  Serial.begin(115200);
  delay(1000);
  
  // Deshabilitar watchdog para evitar reinicios
  disableCore0WDT();
  
  // Mensaje de bienvenida
  Serial.println("\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
  Serial.println("‚ïë  üöÄ ESP32-C3 MINI - EXPLORADOR TOTAL v6.0   ‚ïë");
  Serial.println("‚ïë  üî¨ Diagn√≥stico completo sin watchdog        ‚ïë");
  Serial.println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
  
  delay(500);
  mostrarMenu();
}

void loop() {
  if (Serial.available()) {
    String comando = Serial.readStringUntil('\n');
    comando.trim();
    
    if (comando.length() > 0) {
      ejecutarComando(comando);
    }
  }
  delay(100);
}

void mostrarMenu() {
  Serial.println("\nüìã MEN√ö DE EXPLORACI√ìN:");
  Serial.println("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê");
  Serial.println("‚îÇ 1 - Informaci√≥n del Chip               ‚îÇ");
  Serial.println("‚îÇ 2 - An√°lisis de Memoria                ‚îÇ");
  Serial.println("‚îÇ 3 - Test de WiFi                       ‚îÇ");
  Serial.println("‚îÇ 4 - Test de GPIOs                      ‚îÇ");
  Serial.println("‚îÇ 5 - Estado del Sistema                 ‚îÇ");
  Serial.println("‚îÇ 6 - Sensores Internos                  ‚îÇ");
  Serial.println("‚îÇ 7 - Test de LEDs                       ‚îÇ");
  Serial.println("‚îÇ 8 - Benchmark de Rendimiento           ‚îÇ");
  Serial.println("‚îÇ 9 - DIAGN√ìSTICO COMPLETO               ‚îÇ");
  Serial.println("‚îÇ                                         ‚îÇ");
  Serial.println("‚îÇ help - Mostrar este men√∫               ‚îÇ");
  Serial.println("‚îÇ reset - Reiniciar                      ‚îÇ");
  Serial.println("‚îÇ sleep - Deep Sleep                     ‚îÇ");
  Serial.println("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò");
  Serial.print("üí¨ Comando: ");
}

void ejecutarComando(String cmd) {
  Serial.println();
  
  if (cmd == "1") {
    explorarChip();
  }
  else if (cmd == "2") {
    explorarMemoria();
  }
  else if (cmd == "3") {
    explorarWiFi();
  }
  else if (cmd == "4") {
    explorarGPIOs();
  }
  else if (cmd == "5") {
    explorarSistema();
  }
  else if (cmd == "6") {
    explorarSensores();
  }
  else if (cmd == "7") {
    testLEDs();
  }
  else if (cmd == "8") {
    benchmark();
  }
  else if (cmd == "9") {
    diagnosticoTotal();
  }
  else if (cmd == "help" || cmd == "h") {
    mostrarMenu();
    return;
  }
  else if (cmd == "reset") {
    Serial.println("üîÑ Reiniciando...");
    delay(1000);
    ESP.restart();
  }
  else if (cmd == "sleep") {
    Serial.println("üí§ Entrando en Deep Sleep. Presiona RESET para despertar.");
    delay(500);
    esp_deep_sleep_start();
  }
  else {
    Serial.println("‚ùå Comando no reconocido: '" + cmd + "'");
    Serial.println("üí° Escribe 'help' para ver opciones");
  }
  
  Serial.println("\n" + String(char(196)) + String(char(196)) + String(char(196)) + " Listo " + String(char(196)) + String(char(196)) + String(char(196)));
  Serial.print("üí¨ Siguiente comando: ");
}

// === 1. EXPLORACI√ìN DEL CHIP ===
void explorarChip() {
  Serial.println("üîç AN√ÅLISIS DEL CHIP ESP32-C3");
  Serial.println("===============================");
  
  esp_chip_info_t chip_info;
  esp_chip_info(&chip_info);
  
  Serial.println("üìã IDENTIFICACI√ìN:");
  Serial.println("‚Ä¢ Modelo: " + String(ESP.getChipModel()));
  Serial.println("‚Ä¢ Revisi√≥n: " + String(ESP.getChipRevision()));
  Serial.println("‚Ä¢ N√∫cleos: " + String(chip_info.cores));
  Serial.println("‚Ä¢ Arquitectura: RISC-V 32-bit");
  Serial.println("‚Ä¢ WiFi: " + String(chip_info.features & CHIP_FEATURE_WIFI_BGN ? "S√ç" : "NO"));
  Serial.println("‚Ä¢ Bluetooth: " + String(chip_info.features & CHIP_FEATURE_BT ? "S√ç" : "NO"));
  
  // MAC √∫nico
  uint64_t chipId = ESP.getEfuseMac();
  Serial.printf("‚Ä¢ Chip ID: %04X%08X\n", (uint16_t)(chipId>>32), (uint32_t)chipId);
  
  Serial.println("\nüíæ MEMORIA FLASH:");
  uint32_t flashSize = ESP.getFlashChipSize();
  Serial.println("‚Ä¢ Tama√±o: " + String(flashSize/(1024*1024)) + " MB");
  Serial.println("‚Ä¢ Velocidad: " + String(ESP.getFlashChipSpeed()/1000000) + " MHz");
  Serial.println("‚Ä¢ Modo: " + getFlashModeStr());
  
  Serial.println("\nüìä PROGRAMA ACTUAL:");
  Serial.println("‚Ä¢ Tama√±o sketch: " + String(ESP.getSketchSize()/1024) + " KB");
  Serial.println("‚Ä¢ Espacio libre: " + String(ESP.getFreeSketchSpace()/1024) + " KB");
  Serial.println("‚Ä¢ SDK Version: " + String(ESP.getSdkVersion()));
  
  Serial.println("\n‚úÖ An√°lisis del chip completado");
}

// === 2. EXPLORACI√ìN DE MEMORIA ===
void explorarMemoria() {
  Serial.println("üß† AN√ÅLISIS DE MEMORIA");
  Serial.println("=======================");
  
  Serial.println("üìä HEAP PRINCIPAL:");
  uint32_t heapTotal = ESP.getHeapSize();
  uint32_t heapLibre = ESP.getFreeHeap();
  uint32_t heapUsado = heapTotal - heapLibre;
  
  Serial.println("‚Ä¢ Total: " + String(heapTotal/1024) + " KB");
  Serial.println("‚Ä¢ Libre: " + String(heapLibre/1024) + " KB");
  Serial.println("‚Ä¢ Usado: " + String(heapUsado/1024) + " KB");
  Serial.println("‚Ä¢ Utilizaci√≥n: " + String((heapUsado*100)/heapTotal) + "%");
  
  // Informaci√≥n detallada del heap
  multi_heap_info_t info;
  heap_caps_get_info(&info, MALLOC_CAP_DEFAULT);
  
  Serial.println("\nüîç DETALLES DEL HEAP:");
  Serial.println("‚Ä¢ Bloques totales: " + String(info.total_blocks));
  Serial.println("‚Ä¢ Bloques libres: " + String(info.free_blocks));
  Serial.println("‚Ä¢ Bloque m√°s grande: " + String(info.largest_free_block) + " bytes");
  Serial.println("‚Ä¢ Bytes libres: " + String(info.total_free_bytes));
  
  // Test de fragmentaci√≥n
  Serial.println("\nüß™ TEST DE FRAGMENTACI√ìN:");
  void* testPtr = malloc(1024);
  if (testPtr) {
    Serial.println("‚Ä¢ Asignaci√≥n de 1KB: ‚úÖ Exitosa");
    free(testPtr);
    Serial.println("‚Ä¢ Liberaci√≥n: ‚úÖ Exitosa");
  } else {
    Serial.println("‚Ä¢ Asignaci√≥n de 1KB: ‚ùå Fall√≥");
  }
  
  Serial.println("\n‚úÖ An√°lisis de memoria completado");
}

// === 3. EXPLORACI√ìN DE WIFI ===
void explorarWiFi() {
  Serial.println("üì∂ AN√ÅLISIS DE WIFI");
  Serial.println("====================");
  
  // Configuraci√≥n inicial
  WiFi.mode(WIFI_OFF);
  delay(100);
  WiFi.mode(WIFI_STA);
  delay(200);
  
  Serial.println("üì° INFORMACI√ìN B√ÅSICA:");
  Serial.println("‚Ä¢ MAC Address: " + WiFi.macAddress());
  Serial.println("‚Ä¢ Modo: Station (STA)");
  
  // Escaneo progresivo de redes
  Serial.println("\nüîç ESCANEANDO REDES...");
  Serial.print("‚è≥ ");
  
  int redes = WiFi.scanNetworks(false, true, false, 300);
  Serial.println("¬°Completado!");
  
  if (redes > 0) {
    Serial.println("\nüìã REDES ENCONTRADAS (" + String(redes) + "):");
    
    for (int i = 0; i < min(redes, 8); i++) {
      String seguridad = getSecurityType(WiFi.encryptionType(i));
      String intensidad = getRSSIQuality(WiFi.RSSI(i));
      
      Serial.println("  " + String(i+1) + ". " + WiFi.SSID(i));
      Serial.println("     üîê " + seguridad + " | üì∂ " + intensidad + 
                    " (" + String(WiFi.RSSI(i)) + "dBm) | üì∫ Ch" + String(WiFi.channel(i)));
      
      delay(10); // Peque√±a pausa entre redes
    }
    
    if (redes > 8) {
      Serial.println("  ... y " + String(redes - 8) + " redes m√°s");
    }
  } else {
    Serial.println("\n‚ùå No se encontraron redes WiFi");
  }
  
  WiFi.scanDelete();
  WiFi.mode(WIFI_OFF);
  Serial.println("\n‚úÖ An√°lisis WiFi completado");
}

// === 4. EXPLORACI√ìN SEGURA DE GPIOS ===
void explorarGPIOs() {
  Serial.println("üîå AN√ÅLISIS DE GPIOS");
  Serial.println("=====================");
  
  // Lista de GPIOs seguros para testear
  int gpios[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 10};
  int total = sizeof(gpios)/sizeof(gpios[0]);
  
  Serial.println("üìç PINES DISPONIBLES:");
  Serial.print("‚Ä¢ Testeando: ");
  for(int i = 0; i < total; i++) {
    Serial.print(String(gpios[i]));
    if(i < total-1) Serial.print(", ");
  }
  Serial.println("\n‚Ä¢ Reservados: 9(BOOT), 18-21(USB/UART)");
  
  Serial.println("\nüß™ EJECUTANDO TESTS:");
  String funcionales = "";
  String problem√°ticos = "";
  int ok = 0;
  
  for (int i = 0; i < total; i++) {
    int pin = gpios[i];
    Serial.print("  GPIO " + String(pin) + ": ");
    
    // Test b√°sico de salida
    pinMode(pin, OUTPUT);
    digitalWrite(pin, HIGH);
    delay(2);
    bool testHigh = digitalRead(pin);
    
    digitalWrite(pin, LOW);
    delay(2);
    bool testLow = digitalRead(pin);
    
    // Test de entrada con pull-up
    pinMode(pin, INPUT_PULLUP);
    delay(2);
    bool testPullup = digitalRead(pin);
    
    // Restaurar a entrada
    pinMode(pin, INPUT);
    
    // Evaluar resultados
    if (testHigh && !testLow && testPullup) {
      Serial.println("‚úÖ Funcional");
      funcionales += String(pin) + " ";
      ok++;
    } else {
      Serial.println("‚ö†Ô∏è Problem√°tico");
      problem√°ticos += String(pin) + " ";
    }
    
    delay(50); // Pausa segura entre tests
  }
  
  Serial.println("\nüìä RESUMEN:");
  Serial.println("‚Ä¢ Funcionales (" + String(ok) + "): " + funcionales);
  if (problem√°ticos.length() > 0) {
    Serial.println("‚Ä¢ Problem√°ticos: " + problem√°ticos);
  }
  
  Serial.println("\n‚úÖ An√°lisis de GPIOs completado");
}

// === 5. EXPLORACI√ìN DEL SISTEMA ===
void explorarSistema() {
  Serial.println("‚öôÔ∏è AN√ÅLISIS DEL SISTEMA");
  Serial.println("========================");
  
  Serial.println("üîÑ INFORMACI√ìN DE ARRANQUE:");
  Serial.println("‚Ä¢ Raz√≥n del reset: " + getResetReason());
  Serial.println("‚Ä¢ Tiempo activo: " + String(millis()/1000) + " segundos");
  Serial.println("‚Ä¢ N√∫cleo actual: " + String(xPortGetCoreID()));
  
  Serial.println("\nüïê FRECUENCIAS DE RELOJ:");
  Serial.println("‚Ä¢ CPU: " + String(ESP.getCpuFreqMHz()) + " MHz");
  Serial.println("‚Ä¢ APB: " + String(rtc_clk_apb_freq_get()/1000000) + " MHz");
  Serial.println("‚Ä¢ XTAL: " + String(rtc_clk_xtal_freq_get()) + " MHz");
  
  Serial.println("\nüîã GESTI√ìN DE ENERG√çA:");
  Serial.println("‚Ä¢ Wake-up causa: " + String(esp_sleep_get_wakeup_cause()));
  Serial.println("‚Ä¢ Modo actual: Rendimiento normal");
  
  Serial.println("\n‚úÖ An√°lisis del sistema completado");
}

// === 6. EXPLORACI√ìN DE SENSORES ===
void explorarSensores() {
  Serial.println("üå°Ô∏è AN√ÅLISIS DE SENSORES");
  Serial.println("=========================");
  
  Serial.println("üå°Ô∏è SENSOR DE TEMPERATURA:");
  float temp = temperatureRead();
  Serial.println("‚Ä¢ Temperatura del chip: " + String(temp, 1) + "¬∞C");
  
  if (temp > 80) {
    Serial.println("üî• ADVERTENCIA: Temperatura muy alta!");
  } else if (temp > 60) {
    Serial.println("‚ö†Ô∏è Temperatura elevada");
  } else {
    Serial.println("‚úÖ Temperatura normal");
  }
  
  Serial.println("\n‚è±Ô∏è SISTEMA DE TIMING:");
  Serial.println("‚Ä¢ Millis(): " + String(millis()) + " ms");
  Serial.println("‚Ä¢ Micros(): " + String(micros()) + " Œºs");
  
  // Test de precisi√≥n
  Serial.print("üéØ Test de precisi√≥n delay(100ms): ");
  unsigned long inicio = millis();
  delay(100);
  unsigned long fin = millis();
  unsigned long precision = fin - inicio;
  Serial.println(String(precision) + "ms");
  
  if (precision >= 98 && precision <= 102) {
    Serial.println("‚úÖ Excelente precisi√≥n");
  } else {
    Serial.println("‚ö†Ô∏è Desviaci√≥n: " + String(abs((int)(precision-100))) + "ms");
  }
  
  Serial.println("\n‚úÖ An√°lisis de sensores completado");
}

// === 7. TEST DE LEDS ===
void testLEDs() {
  Serial.println("üí° TEST DE LEDS");
  Serial.println("================");
  
  int candidatos[] = {2, 3, 7, 8, 10};
  String nombres[] = {"GPIO2", "GPIO3", "GPIO7", "GPIO8", "GPIO10"};
  int total = sizeof(candidatos)/sizeof(candidatos[0]);
  
  Serial.println("üîç Probando " + String(total) + " posibles ubicaciones de LEDs");
  Serial.println("üëÄ Observa la placa durante cada test...\n");
  
  for (int i = 0; i < total; i++) {
    int pin = candidatos[i];
    Serial.println("üß™ Testeando " + nombres[i] + ":");
    
    pinMode(pin, OUTPUT);
    Serial.print("   Parpadeando: ");
    
    // Patr√≥n distintivo de parpadeo
    for (int j = 0; j < 6; j++) {
      digitalWrite(pin, HIGH);
      delay(200);
      digitalWrite(pin, LOW);
      delay(200);
      Serial.print("‚óè");
    }
    
    pinMode(pin, INPUT);
    Serial.println(" [Completado]");
    
    delay(500); // Pausa entre tests
  }
  
  Serial.println("\nüí° Test de LEDs completado");
  Serial.println("‚ÑπÔ∏è Si no viste LEDs, pueden estar en otros pines o no existir");
}

// === 8. BENCHMARK DE RENDIMIENTO ===
void benchmark() {
  Serial.println("üèÉ BENCHMARK DE RENDIMIENTO");
  Serial.println("============================");
  
  // Test 1: C√°lculo matem√°tico
  Serial.print("üßÆ Test matem√°tico (10k operaciones)... ");
  unsigned long inicio = micros();
  volatile float resultado = 0;
  for (int i = 0; i < 10000; i++) {
    resultado += sqrt(i) * 3.14159;
  }
  unsigned long tiempoMath = micros() - inicio;
  Serial.println(String(tiempoMath) + " Œºs");
  
  // Test 2: Operaciones GPIO
  Serial.print("‚ö° Test GPIO (5k toggles)... ");
  pinMode(2, OUTPUT);
  inicio = micros();
  for (int i = 0; i < 5000; i++) {
    digitalWrite(2, i % 2);
  }
  unsigned long tiempoGPIO = micros() - inicio;
  pinMode(2, INPUT);
  Serial.println(String(tiempoGPIO) + " Œºs");
  
  // Test 3: Operaciones de memoria
  Serial.print("üíæ Test memoria (concatenaci√≥n)... ");
  inicio = micros();
  String testStr = "";
  for (int i = 0; i < 500; i++) {
    testStr += String(i);
  }
  unsigned long tiempoMem = micros() - inicio;
  Serial.println(String(tiempoMem) + " Œºs");
  
  // Resultados finales
  Serial.println("\nüìä PUNTUACI√ìN FINAL:");
  Serial.println("‚Ä¢ Matem√°ticas: " + String(10000000.0/tiempoMath, 1) + " ops/seg");
  Serial.println("‚Ä¢ GPIO: " + String(5000000.0/tiempoGPIO, 1) + " ops/seg");
  Serial.println("‚Ä¢ Memoria: " + String(500000.0/tiempoMem, 1) + " ops/seg");
  
  Serial.println("\n‚úÖ Benchmark completado");
}

// === 9. DIAGN√ìSTICO TOTAL ===
void diagnosticoTotal() {
  Serial.println("üî¨ DIAGN√ìSTICO COMPLETO");
  Serial.println("========================");
  Serial.println("‚è≥ Ejecutando todos los an√°lisis...\n");
  
  explorarChip();
  delay(1000);
  
  explorarMemoria();
  delay(1000);
  
  explorarWiFi();
  delay(1000);
  
  explorarGPIOs();
  delay(1000);
  
  explorarSistema();
  delay(1000);
  
  explorarSensores();
  delay(1000);
  
  benchmark();
  
  Serial.println("\nüéâ DIAGN√ìSTICO COMPLETO TERMINADO");
  Serial.println("üìä Todos los sistemas han sido analizados exitosamente");
  diagnosticoCompleto = true;
}

// === FUNCIONES AUXILIARES ===
String getFlashModeStr() {
  switch(ESP.getFlashChipMode()) {
    case FM_QIO: return "QIO";
    case FM_QOUT: return "QOUT"; 
    case FM_DIO: return "DIO";
    case FM_DOUT: return "DOUT";
    default: return "Desconocido";
  }
}

String getResetReason() {
  switch(esp_reset_reason()) {
    case ESP_RST_POWERON: return "Power-On";
    case ESP_RST_EXT: return "Reset externo";
    case ESP_RST_SW: return "Software";
    case ESP_RST_PANIC: return "Excepci√≥n/P√°nico";
    case ESP_RST_INT_WDT: return "Interrupt WDT";
    case ESP_RST_TASK_WDT: return "Task WDT";
    case ESP_RST_WDT: return "Other WDT";
    case ESP_RST_DEEPSLEEP: return "Deep Sleep";
    case ESP_RST_BROWNOUT: return "Brownout";
    default: return "Desconocido";
  }
}

String getSecurityType(wifi_auth_mode_t tipo) {
  switch(tipo) {
    case WIFI_AUTH_OPEN: return "Abierta";
    case WIFI_AUTH_WEP: return "WEP";
    case WIFI_AUTH_WPA_PSK: return "WPA-PSK";
    case WIFI_AUTH_WPA2_PSK: return "WPA2-PSK";
    case WIFI_AUTH_WPA_WPA2_PSK: return "WPA/WPA2";
    case WIFI_AUTH_WPA2_ENTERPRISE: return "WPA2-Enterprise";
    case WIFI_AUTH_WPA3_PSK: return "WPA3-PSK";
    default: return "Desconocida";
  }
}

String getRSSIQuality(int rssi) {
  if (rssi > -30) return "Excelente";
  else if (rssi > -50) return "Muy buena";
  else if (rssi > -60) return "Buena";
  else if (rssi > -70) return "Regular";
  else return "D√©bil";
}